import React, { useState, useRef }  from "react";
import { useForm, useController, Controller } from "react-hook-form";
import NumberFormat from "react-number-format";
import { withRouter, Link } from "react-router-dom";
import { useStateMachine } from "little-state-machine";
import {
  Box, Button, ButtonGroup, Heading, Tabs, TabList, TabPanels, TabPanel, Tab, Input, Select, Text, Center, InputGroup,
  InputLeftElement, Icon
} from "@chakra-ui/react";
import { ChakraProvider } from "@chakra-ui/react"
import updateAction from "./updateAction";
import { FeedbackFish } from "@feedback-fish/react";
import Header from "./components/Header";
import { useAuth0 } from "@auth0/auth0-react";
import "./styles.css";
import "./uploadPageStyles.css"
import {CgAttachment} from 'react-icons/cg'
import FileUpload from "./fileUploadComponent";
import { FiFile } from "react-icons/fi";


const UploadPage = ( { name, placeholder, acceptedFileTypes, children, isRequired = false } ) => {

  const inputRef = useRef(0);

  
    const {
        register,
        handleSubmit,
        control,
        errors,
        getValues,
        setValue,
        watch,
        ref
        
      } = useForm();

    const { action, state } = useStateMachine(updateAction);
    const { isAuthenticated, loginWithRedirect, user } = useAuth0();
    const headers = new Headers();

  headers.append("Authorization", "Basic ZHN1bW1lcnM6SmFtZG93bkxvYW5z");
  headers.append("Content-Type", "application/json");


  const onSubmit = (data) => {
    action(data)

  }

    const [step,setStep] = useState(0);
    const [hideButton,setHideButton] = useState(0);
    const step_form = step+1;
    /*
    FileUpload.defaultProps = {
      acceptedFileTypes: 'pdf,jpg,png,jpeg',
      allowMultipleFiles: false,
    };
    */
   


    return(
        <>
        <Header/>
       
    <Box  p={1} m="10px auto">
      <Heading as="h1" size="xl" textAlign="center">
      Upload Section
      </Heading>
      
      <form onSubmit={handleSubmit()}> 
        
           
              <Tabs p={1}  borderWidth="1px"
            borderRadius="lg"
            boxShadow="1px 1px 3px rgba(0,0,0,0.3)"isFitted variant='line'>
              
                <TabList>
                    <Tab>Personal Documents</Tab>
                    <Tab>Financial Documents</Tab>
                    <Tab>Proof Of Identity</Tab>
                </TabList>
                
                <TabPanels>
                  <TabPanel id="personalInfo"> 
                  <label style={{padding: 2}} > Type Of ID  </label>
                      <Box w="75%">
                      <Select 
                         name="idType"
                         options={ ["Yes","No"] }
                         placeholder="Select option"
                         ref={register({ required: true })}
                          > ID Type
                            <option value="Driver's License">Driver's License</option>
                            <option value="Passport">Passport</option>
                            <option value="Voter's ID">Voter's ID</option>
                          </Select>

                     </Box> 

                          <br></br>

                      <Controller
                      name="id"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={<Icon as={FiFile} />}
                          />
                          <input  onChange={(e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef}  inputRef={ref} style={{ display: 'none' }}></input>
                          <Input
                            placeholder={ "Upload Copy Of Selected ID " }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                 value={value && value.name || ''}
                          />
                      </InputGroup>
                     
                        ) } }
                      />

                <Text fontSize='xs' color='grey'>  File format : pdf, jpg, jpeg, png</Text>

                    
                    
                 <label style={{padding: 2}}> TRN Card </label>
                    <Controller
                      name="trn"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={ <Icon as={FiFile} /> }
                          />
                          <input  onChange={(e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>
                          <Input
                            placeholder={ "Upload Copy Of TRN " }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                  value={value && value.name || ''}
                          />
                        
                      </InputGroup>
                        ) } }

                      />

     <Text fontSize='xs' color='grey'>  File format : pdf, jpg, jpeg, png</Text>


     <label style={{padding: 2}} > NIS Card </label>
                    <Controller
                      name="nis"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={<Icon as={FiFile} />}
                          />
                          <input  onChange={(e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>
                          <Input
                            placeholder={ "Upload Copy Of NIS Card " }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                 value={value && value.name || ''}
                          />
                      </InputGroup>
                        ) } }

                      />

     <Text fontSize='xs' color='grey'>  File format : pdf, jpg, jpeg, png</Text>
                      <br></br>
                      <ButtonGroup spacing={4}>
                      <Button loadingText="Submitting" variantColor="teal" type="submit">
                        Save Progress
                      </Button>

                      <Button variantColor="teal" variant="outline" >
                        Next
                      </Button>
                    </ButtonGroup>

                  </TabPanel>
              
                  <TabPanel id="financialInfo">

                    
     <label style={{padding: 2}} > Last 3 Payslips </label>

                    <Controller
                      name="payslipOne"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={<Icon as={FiFile} />}
                          />
                          <input onChange={ (e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>
                          <Input
                            placeholder={ "Upload payslip #1" }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                 value={value && value.name || ''}
                          />
                      </InputGroup>
                        ) } }
                      />

                      <br></br>

                 <Controller
                      name="payslipTwo"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={ <Icon as={FiFile} /> }
                          />
                          <input  onChange={(e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>

                          <Input
                            placeholder={ "Upload payslip #2" }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                 value={value && value.name || ''}
                          />

                      </InputGroup>
                        ) } }
                      />

                      <br></br>

                      <Controller
                      name="paySlipThree"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={<Icon as={FiFile} />}
                          />
                          <input  onChange={(e) => onChange(e.target.files[0])}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>

                          <Input
                            placeholder={ "Upload Job Letter " }
                            name={name}
                            onChange={console.log(value)}
                            onClick={ () => inputRef.current.click() }
                            readOnly= {true}
					                  value= {value && value.name || ''}
                          />
                        
                      </InputGroup>
                        ) } }
                      />

       <Text fontSize='xs' color='grey'>  File format : pdf, jpg, jpeg, png</Text>

                  <label style={{padding: 2}} > Job Letter </label>
                    <Controller
                      name="jobLetter"
                      control={control}
                      render={({ onChange, value }) => {
                        return (
                        <InputGroup>
                        <InputLeftElement
                            pointerEvents="none"
                            children={<Icon as={FiFile} />}
                          />
                          
                          <input  onChange={(e) => onChange(e.target.files[0])} inputRef={ref} name={name}
                          type='file' accept={acceptedFileTypes} ref={inputRef} style={{ display: 'none' }}></input>

                          <Input
                            placeholder={ "Upload Job Letter " }
                            onChange={console.log(value)}
                            onClick={() => inputRef.current.click()}
                            readOnly={true}
					                 value={value && value.name || ''}
                          />
                        
                      </InputGroup>
                        ) } }
                      />

     <Text fontSize='xs' color='grey'>  File format : pdf, jpg, jpeg, png</Text>


                      <br></br>
                      <ButtonGroup spacing={4}>
                        <Button loadingText="Submitting" variantColor="teal" type="submit">
                          Save Progress
                        </Button>
                        <Button
                          variantColor="teal"
                          variant="outline"  
                        >
                         Next
                        </Button>
                      </ButtonGroup>

                   </TabPanel>

                  <TabPanel id="personalInfo">

                  </TabPanel>

           { /* <ButtonGroup spacing={4}>
              <Button loadingText="Submitting" variantColor="teal" type="submit">
                Submit
              </Button>
              <Button
                variantColor="teal"
                variant="outline"  
              >
                Reset
              </Button>
            </ButtonGroup> */}

            <Box as="pre" my={10}>
            </Box>
            </TabPanels>
            </Tabs>

 
        </form>
        
    </Box>
        </>
    
    )


}

export default withRouter(UploadPage);